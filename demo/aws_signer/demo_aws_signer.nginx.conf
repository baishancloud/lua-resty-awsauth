worker_processes  1;
error_log /tmp/lua_resty_awsauth_test.error.log debug;
pid /tmp/lua_resty_awsauth_test.nginx.pid;

worker_rlimit_nofile 1024;

events {
    worker_connections 1024;
}

http {
    access_log /tmp/lua_resty_awsauth_test.access.log;

    default_type text/plain;

    lua_package_path '/usr/local/lib/lua/?.lua;;';
    lua_package_cpath '/usr/local/lib/lua/?.so;;';

    server {
        listen 1312;

        location / {
            resolver 8.8.8.8;

            rewrite_by_lua_block {
                local aws_signer = require("resty.awsauth.aws_signer")
                local http = require("resty.http")

                math.randomseed(ngx.time())

                local access_key = "ziw5dp1alvty9n47qksu"
                local secret_key = "V+ZTZ5u5wNvXb+KP5g0dMNzhMeWe372/yRKx4hZV"
                local end_point = "http://bscstorage.com"
                local bucket_name = "test-bucket-" .. tostring(math.random(1000, 9999))

                -- step 1
                local signer, err, msg = aws_signer.new(access_key, secret_key)
                if err ~= nil then
                    ngx.say(string.format("step 1, instantiates class aws_signer: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 1, instantiates class aws_signer: OK"))

                -- step 2
                local httpc, err = http.new()
                if err ~= nil then
                    ngx.say(string.format("step 2, instantiates class http: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 2, instantiates class http: OK"))
                httpc:set_timeout(1000 * 5)


                -- step 3 create a bucket

                -- step 3.1 prepare the request
                local request = {
                    verb = "PUT",
                    uri = "/" .. bucket_name,
                    headers = {
                        Host = "bscstorage.com",
                    },
                }

                ngx.say(string.format("step 3.1, prepare the request: OK"))

                -- step 3.2 add signature to the request
                local ctx, err, msg = signer:add_auth_v4(request, {sign_payload = true})
                if err ~= nil then
                    ngx.say(string.format("step 3.2, add signature: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 3.2, add signature: OK"))

                -- step 3.3 send the request
                local resp, err = httpc:request_uri(end_point .. request.uri,
                                                    {
                                                        method = request.verb,
                                                        headers = request.headers,
                                                    })
                if err ~= nil then
                    ngx.say(string.format("step 3.3, send the request: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 3.3, send the request: OK"))

                -- step 3.4 show the response status
                local status = resp.status
                if status ~= 200 then
                    ngx.say(string.format("step 3.4, show response status: Failed, status NOT 200, is %s, error msg:%s",
                                          status, resp.body))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 3.4, show response status: OK 200"))


                -- step 4 upload a file to the created bucket

                -- step 4.1 prepare the request
                local file_content = 'bla bla'
                local request = {
                    verb = "PUT",
                    uri = "/" .. bucket_name .. "/test-key",
                    headers = {
                        Host = "bscstorage.com",
                        ['X-Amz-Acl'] = "public-read",
                        ['Content-Length'] = #file_content,
                    },
                    body = file_content
                }
                ngx.say(string.format("step 4.1, prepare the request: OK"))

                -- step 4.2 add signature to the request
                local ctx, err, msg = signer:add_auth_v4(request, {sign_payload = true})
                if err ~= nil then
                    ngx.say(string.format("step 4.2, add signature: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 4.2, add signature: OK"))

                -- step 4.3 send the request
                local resp, err = httpc:request_uri(end_point .. request.uri,
                                                    {
                                                        method = request.verb,
                                                        headers = request.headers,
                                                        body = file_content,
                                                    })
                if err ~= nil then
                    ngx.say(string.format("step 4.3, send the request: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 4.3, send the request: OK"))

                -- step 4.4 show the response status
                local status = resp.status
                if status ~= 200 then
                    ngx.say(string.format("step 4.4, show response status: Failed, status NOT 200, is %s, error msg:%s",
                                          status, resp.body))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 4.4, show response status: OK, status is 200"))


                -- step 5 download the file we uploaded in step 4

                -- step 5.1 prepare the request
                local request = {
                    verb = "GET",
                    uri = "/" .. bucket_name .. "/test-key",
                    headers = {
                        Host = "bscstorage.com",
                    },
                }
                ngx.say(string.format("step 5.1, prepare the request: OK"))

                -- step 5.2 add signature to the request
                local ctx, err, msg = signer:add_auth_v4(request, {sign_payload = true})
                if err ~= nil then
                    ngx.say(string.format("step 5.2, add signature: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 5.2, add signature: OK"))

                -- step 5.3 send the request
                local resp, err = httpc:request_uri(end_point .. request.uri,
                                                    {
                                                        method = request.verb,
                                                        headers = request.headers,
                                                    })
                if err ~= nil then
                    ngx.say(string.format("step 5.3, send the request: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 5.3, send the request: OK"))

                -- step 5.4 show the response
                local status = resp.status
                if status ~= 200 then
                    ngx.say(string.format("step 5.4, show response: Failed, status NOT 200, is %s, error msg:%s",
                                           status, resp.body))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 5.4, show response: OK, status is 200, file content is: %s", resp.body))


                -- step 6 get the acl of the file we uploaded in step 4

                -- step 6.1 prepare the request
                local request = {
                    verb = "GET",
                    uri = "/" .. bucket_name .. "/test-key",
                    args = {
                        acl = true,
                    },
                    headers = {
                        Host = "bscstorage.com",
                    },
                }
                ngx.say(string.format("step 6.1, prepare the request: OK"))

                -- step 6.2 add signature to the request
                local ctx, err, msg = signer:add_auth_v4(request, {sign_payload = true})
                if err ~= nil then
                    ngx.say(string.format("step 6.2, add signature: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 6.2, add signature: OK"))

                -- step 6.3 send the request
                local resp, err = httpc:request_uri(end_point .. request.uri,
                                                    {
                                                        method = request.verb,
                                                        headers = request.headers,
                                                    })
                if err ~= nil then
                    ngx.say(string.format("step 6.3, send the request: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 6.3, send the request: OK"))

                -- step 6.4 show the response status
                local status = resp.status
                if status ~= 200 then
                    ngx.say(string.format("step 6.4, show response status: Failed, status NOT 200, is %s, error msg:%s",
                                          status, resp.body))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 6.4, show response status: OK, status is 200"))


                -- step 7 delete the file we uploaded in step 4

                -- step 7.1 prepare the request
                local request = {
                    verb = "DELETE",
                    uri = "/" .. bucket_name .. "/test-key",
                    headers = {
                        Host = "bscstorage.com",
                    },
                }
                ngx.say(string.format("step 7.1, prepare the request: OK"))

                -- step 7.2 add signature to the request
                local ctx, err, msg = signer:add_auth_v4(request, {sign_payload = true})
                if err ~= nil then
                    ngx.say(string.format("step 7.2, add signature: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 7.2, add signature: OK"))

                -- step 7.3 send the request
                local resp, err = httpc:request_uri(end_point .. request.uri,
                                                    {
                                                        method = request.verb,
                                                        headers = request.headers,
                                                    })
                if err ~= nil then
                    ngx.say(string.format("step 7.3, send the request: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 7.3, send the request: OK"))

                -- step 7.4 show the response status
                local status = resp.status
                if status ~= 204 then
                    ngx.say(string.format("step 7.4, show response status: Failed, status NOT 200, is %s, error msg:%s",
                                          status, resp.body))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 7.4, show response status: OK, status is 200"))


                -- step 8 delete the bucket we created in step 3

                -- step 8.1 prepare the request
                local request = {
                    verb = "DELETE",
                    uri = "/" .. bucket_name,
                    headers = {
                        Host = "bscstorage.com",
                    },
                }
                ngx.say(string.format("step 8.1, prepare the request: OK"))

                -- step 8.2 add signature to the request
                local ctx, err, msg = signer:add_auth_v4(request, {sign_payload = true})
                if err ~= nil then
                    ngx.say(string.format("step 8.2, add signature: Failed, %s %s", err, msg))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 8.2, add signature: OK"))

                -- step 8.3 send the request
                local resp, err = httpc:request_uri(end_point .. request.uri,
                                                    {
                                                        method = request.verb,
                                                        headers = request.headers,
                                                    })
                if err ~= nil then
                    ngx.say(string.format("step 8.3, send the request: Failed, %s", err))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 8.3, send the request: OK"))

                -- step 8.4 show the response status
                local status = resp.status
                if status ~= 204 then
                    ngx.say(string.format("step 8.4, show response status: Failed, status NOT 200, is %s, error msg:%s",
                                          status, resp.body))
                    ngx.exit(ngx.HTTP_OK)
                end
                ngx.say(string.format("step 8.4, show response status: OK, status is 200"))

                ngx.eof()
                ngx.exit(ngx.HTTP_OK)
            }
        }
    }
}
