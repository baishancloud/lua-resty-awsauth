worker_processes  1;
error_log /tmp/lua_resty_awsauth_test.error.log debug;
pid /tmp/lua_resty_awsauth_test.nginx.pid;

worker_rlimit_nofile 1024;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict signing_key 1m;
    lua_shared_dict storage 2m;

    access_log /tmp/lua_resty_awsauth_test.access.log;
    default_type text/plain;

    lua_package_path '/usr/local/lib/lua/?.lua;;';
    lua_package_cpath '/usr/local/lib/lua/?.so;;';

    server {
        listen 1313;

        location / {

            rewrite_by_lua_block {

                local aws_authenticator = require("resty.awsauth.aws_authenticator")
                local upload = require("resty.upload")
                local cjson = require("cjson")

                local users = {
                    renzhi = {
                        access_key = 'renzhi_access_key',
                        secret_key = 'renzhi_secret_key',
                    },
                    test_user = {
                        access_key = 'test_user_access_key',
                        secret_key = 'test_user_secret_key',
                    },
                }


                local domains = {
                    "storage.renzhi.com",
                    "renzhi.com",
                    "localhost",
                }


                local function get_table_length(table)
                    local count = 0
                    for _, _ in pairs(table) do
                        count = count + 1
                    end
                    return count
                end


                local function get_secret_key(access_key)
                    for _, auth_info in pairs(users) do
                        if auth_info.access_key == access_key then
                            return auth_info.secret_key, nil, nil
                        end
                    end
                    return nil, 'InvalidAccessKey', 'the access key does not exists: ' .. access_key
                end


                local function get_user_name(access_key)
                    for user_name, auth_info in pairs(users) do
                        if auth_info.access_key == access_key then
                            return user_name, nil, nil
                        end
                    end
                    return nil, 'InvalidAccessKey', 'the access key does not exists: ' .. access_key
                end


                local function get_bucket_from_host(host)
                    if #host == 0 then
                        return nil
                    end

                    if string.match(host, '%d+%.%d+%.%d+%.%d+') then
                        return nil
                    end

                    for _, domain in ipairs(domains) do
                        local s, e = string.find(host, '.' .. domain, 1, true)
                        if e == #host then
                            local bucket_name = host:sub(1, s - 1)
                            if #bucket_name > 0 then
                                return bucket_name
                            end
                        end
                    end

                    return host
                end


                local function extract_bucket_and_key(host, uri)
                    local bucket_in_host = get_bucket_from_host(host)

                    local query_mark_index = string.find(uri, '?', 1, true) or #uri + 1
                    uri = uri:sub(1, query_mark_index - 1)

                    local second_slash_index = string.find(uri, '/', 2, true) or #uri + 1

                    local bucket_name, key_name

                    if bucket_in_host ~= nil then
                        bucket_name = bucket_in_host
                        key_name = uri:sub(2, query_mark_index - 1)
                    else
                        bucket_name = uri:sub(2, second_slash_index - 1)
                        key_name = uri:sub(second_slash_index + 1, query_mark_index - 1)
                    end

                    if #bucket_name == 0 then
                        bucket_name = nil
                    end

                    if #key_name == 0 then
                        key_name = nil
                    end

                    return bucket_name, key_name
                end


                local function do_service_api(user_name, storage)
                    local method = ngx.var.request_method
                    if method ~= 'GET' then
                        ngx.status = 405
                        ngx.say('not supported api')
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    end

                    local user_buckets = storage:get(user_name)
                    if user_buckets == nil then
                        user_buckets = {}
                    else
                        user_buckets = cjson.decode(user_buckets)
                    end

                    ngx.say(string.format('you have the following %d buckets:', get_table_length(user_buckets)))

                    for bucket_name, bucket_files in pairs(user_buckets) do
                        ngx.say(string.format('bucket name: %s, number of files: %d', bucket_name, get_table_length(bucket_files)))
                    end

                    ngx.eof()
                    ngx.exit(ngx.HTTP_OK)
                end


                local function do_bucket_api(user_name, bucket_name, storage)
                    local method = ngx.var.request_method

                    local user_buckets = storage:get(user_name)
                    if user_buckets == nil then
                        user_buckets = {}
                    else
                        user_buckets = cjson.decode(user_buckets)
                    end

                    if method == 'PUT' then
                        user_buckets[bucket_name] = {}
                        local success, err = storage:set(user_name, cjson.encode(user_buckets))
                        if success == true then
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        else
                            ngx.status = 500
                            ngx.say(string.format('faild to create bucket: %s', err))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end
                    elseif method == 'DELETE' then
                        user_buckets[bucket_name] = nil
                        local success, err = storage:set(user_name, cjson.encode(user_buckets))
                        if success == true then
                            ngx.status = 204
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        else
                            ngx.status = 500
                            ngx.say(string.format('faild to delete bucket: %s', err))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end
                    elseif method == 'GET' then
                        local bucket_files = user_buckets[bucket_name]
                        if bucket_files == nil then
                            ngx.status = 404
                            ngx.say(string.format('bucket: %s, does not exists', bucket_name))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end
                        ngx.say(string.format('bucket: %s, contains the following %d files:',
                                              bucket_name, get_table_length(bucket_files)))

                        for file_name, file_content in pairs(bucket_files) do
                            ngx.say(string.format('file name: %s, file size: %d', file_name, #file_content))
                        end
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    else
                        ngx.status = 405
                        ngx.say('not supported api')
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    end
                end


                local function do_object_api(user_name, bucket_name, key_name, file_content, storage)
                    local method = ngx.var.request_method

                    local user_buckets = storage:get(user_name)
                    if user_buckets == nil then
                        user_buckets = {}
                    else
                        user_buckets = cjson.decode(user_buckets)
                    end

                    local bucket_files = user_buckets[bucket_name]
                    if bucket_files == nil then
                        ngx.status = 404
                        ngx.say(string.format('bucket: %s, does not exists', bucket_name))
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    end

                    if method == 'PUT' or method == 'POST' then
                        bucket_files[key_name] = file_content
                        local success, err = storage:set(user_name, cjson.encode(user_buckets))
                        if success == true then
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        else
                            ngx.status = 500
                            ngx.say(string.format('faild to upload the file: %s', err))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end
                    elseif method == 'DELETE' then
                        bucket_files[key_name] = nil
                        local success, err = storage:set(user_name, cjson.encode(user_buckets))
                        if success == true then
                            ngx.status = 204
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        else
                            ngx.status = 500
                            ngx.say(string.format('faild to delete file: %s', err))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end
                    elseif method == 'GET' then
                        local file_content = bucket_files[key_name]
                        if file_content == nil then
                            ngx.status = 404
                            ngx.say(string.format('file: %s, does not exists', key_name))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end

                        ngx.say(file_content)
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    else
                        ngx.status = 405
                        ngx.say('not supported api')
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    end
                end


                local function get_form_fields()
                    local form, err = upload:new(8192)
                    if err ~= nil then
                        return nil, 'InternalError', 'failed to new upload: ' .. err
                    end

                    form:set_timeout(5000)

                    local fields = {}
                    local k = ''

                    while true do
                        local typ, res, err = form:read()
                        if err ~= nil then
                            return nil, 'InternalError', 'failed to read fields: ' .. err
                        end

                        if typ == 'eof' then
                            break
                        elseif typ == 'header' then
                            local disposition = res[2]
                            local _, v_start = string.find(disposition, 'name="')
                            local v_end, _ = string.find(disposition, '"', v_start + 1)
                            k = string.sub(disposition, v_start + 1, v_end - 1)
                        elseif typ == 'body' then
                            fields[k] = (fields[k] or '') .. res
                        end
                    end

                    return fields
                end


                local function run()
                    local authenticator = aws_authenticator.new(get_secret_key,
                                                                get_bucket_from_host,
                                                                ngx.shared.signing_key)

                    local ctx, fields, err, msg, is_post_upload


                    if ngx.var.request_method == 'POST' and ngx.var.request_uri == '/' then
                        fields, err, msg = get_form_fields()
                        if err ~= nil then
                            ngx.status = 500
                            ngx.say(string.format("faild to get form fields: %s, %s", err, msg))
                            ngx.exit(ngx.HTTP_OK)
                        end

                        ctx, err, msg = authenticator:authenticate_post(fields)

                        is_post_upload = true
                    else
                        ctx, err, msg = authenticator:authenticate()
                    end

                    if err ~= nil then
                        ngx.status = 403
                        ngx.say(string.format("authenticate failed: %s, %s", err, msg))
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    end

                    if ctx.anonymous == true then
                        ngx.status = 403
                        ngx.say(string.format("this service does not allow anonymous access"))
                        ngx.eof()
                        ngx.exit(ngx.HTTP_OK)
                    end

                    local user_name, err, msg = get_user_name(ctx.access_key)
                    if err ~= nil then
                        ngx.say(string.format("faild to get user name by access key: %s, %s", err, msg))
                    end

                    local uri = ngx.var.request_uri
                    local host = ngx.req.get_headers().host
                    if type(host) == 'table' then
                        host = host[1]
                    end
                    local bucket_name, key_name = extract_bucket_and_key(host, uri)

                    ngx.log(ngx.INFO, string.format('to process request: user name: %s, bucket name %s, key name: %s',
                                                    user_name, tostring(bucket_name), tostring(key_name)))
                    local storage = ngx.shared.storage

                    if is_post_upload == true then
                        local bucket_name = get_bucket_from_host(host)
                        if bucket_name == nil then
                            ngx.status = 400
                            ngx.say(string.format("there is no bucket name in host"))
                            ngx.eof()
                            ngx.exit(ngx.HTTP_OK)
                        end
                        key_name = ctx.key
                        file_content = ctx.file
                        do_object_api(user_name, bucket_name, key_name, file_content, storage)
                    elseif key_name ~= nil then
                        ngx.req.read_body()
                        local file_content = ngx.req.get_body_data()
                        do_object_api(user_name, bucket_name, key_name, file_content, storage)
                    elseif bucket_name ~= nil then
                        do_bucket_api(user_name, bucket_name, storage)
                    else
                        do_service_api(user_name, storage)
                    end
                end


                run()

            }
        }
    }
}
